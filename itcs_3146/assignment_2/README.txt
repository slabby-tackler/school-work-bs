Author:   Nicholas Wade (nwade3)
Filename: justify.c
Input:	 File with paragraph, number of characters per line
Output:   Contents of file with appropriate number of characters per line
Course:   ITCS-3146
Version:  1.2

	The overall datastructure for this program is a queue. The way I imagined it would work is in a first in first out layout, since I wanted to keep the order of the words.  How the struct looks is that it holds three values. The first is the word I am storing; a character array. The second is the length of the array. This keeps me from having to calculate the amount of characters are in the string when iterating through everything.  The final value is a pointer to the next word in the queue.  It is a singlely linked list because I have no reason to go backwards through it.
	
	The algorithm for this program is very simple. It first iteratets through every character in the file.  When it finds whitespace, using isspace(), it takes the word it was currently building and adds it to the queue.  When the file is done being processed, it iterates until the queue is NULL, meaning that it is empty and there are no more items to process.  Next it iterates through all the paragraphs it found.  These were being kept track of when the queue was buliding.  Paragraphs were denoted as "\n\n".  It then iterates through the number of words in that paragraph, again being kept track of when the queue was being built.  The number of words per line is determined by moving through the queue, looking until the number of characters of each word plus 1 per word was greater than the number of characters requested by the user.  Space between words was determined by dividing the space left by the number of words. For the first word ceil() is used incase a non-whole number is given as the number of spaces, and floor() for the rest.  Simple for loops were used to print the appropriate number of spaces between the words.  Dequeue is then called which prints the word at the top and removes it from the list.  At the end of a line a '\n' is placed.  At the end of a paragraph a '\n\n' is placed.  Logically it should work for all cases, but overall it does not run, due to segmentation fault before it starts building the queue or shortly after adding the first item.
	
	This program does compile. You must link the math library.  It is important because I use the ceil() function.  This program does NOT run as expected.  A segmenation fault occurs when running the program. it occurs at some point before items are even being added to the queue, so I had trouble tracking down the cause of this.
